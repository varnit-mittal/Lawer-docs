{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Lawer For the git repository visit lawer . Description Legal jargon and poorly designed databases often create significant barriers for citizens seeking legal information. Our team addressed this issue by creating a solution that makes law resources easily searchable and understandable. Lawer offers situational based searching so that the legal databases can be navigated using simple language. Lawer is an Android application designed to revolutionize the way both citizens and law practitioners interact with legal resources. For citizens, it offers intuitive tools to search and understand legal precedents, demystifying complex language. Law practitioners also benefit from advanced precedent searching capabilities, streamlining research and reducing the risk of missing critical insights. Additionally, Lawer's integrated file management system provides practitioners with a secure and organized way to handle case files. Our solution targets the UN sustainable goal of \"Peace, Justice and Strong Institutions\". Our solution covers various targets in SDG 16. 16.2(End abuse, exploitation, trafficking and all forms of violence against and torture of children): Our app provides education, which can significantly increase awareness and contribute towards the end of abuse 16.3(Promote the rule of law at the national and international levels and ensure equal access to justice for all): Our application will ensure public is aware of their legal rights and cannot be exploited by wrongdoers by feeding them lies 16.5(Substantially reduce corruption and bribery in all their forms): With the easy access to legal information, general public will be more prone to take a stand against corruption. 16.10(Ensure public access to information and protect fundamental freedoms, in accordance with national legislation and international agreements): The Right to Information, commonly understood as the \u201cright to access information held by public bodies\u201d in international parlance is recognised by UNESCO as a fundamental freedom and a key pillar to building inclusive societies. Legal jargon witholds the right to information in a disguised manner and our application ensures that it doesn't happen. Installation and run To test lawer, you can clone the github repository using the git clone. Make sure you have an environment where you can run flutter projects, you may use the terminal or android studio as per your preference. If you are on android studio, open the flutter project inside the project directory, or cd in the flutter directory of you are on the terminal. Open the terminal in android studio and run the command flutter pub get This command will resolve all the dependencies required for the project, and install any required packages. After that we our project is ready to run, use the emulator or connect a device as per your preference, and run the command flutter run People with android studio might run the project with the run main.dart button, it's okay to do so, but for running the project the first time, it is advised to run the command as flutter run can prompt the user to setup some things like multidex support if they haven't been set already.","title":"Home"},{"location":"#welcome-to-lawer","text":"For the git repository visit lawer .","title":"Welcome to Lawer"},{"location":"#description","text":"Legal jargon and poorly designed databases often create significant barriers for citizens seeking legal information. Our team addressed this issue by creating a solution that makes law resources easily searchable and understandable. Lawer offers situational based searching so that the legal databases can be navigated using simple language. Lawer is an Android application designed to revolutionize the way both citizens and law practitioners interact with legal resources. For citizens, it offers intuitive tools to search and understand legal precedents, demystifying complex language. Law practitioners also benefit from advanced precedent searching capabilities, streamlining research and reducing the risk of missing critical insights. Additionally, Lawer's integrated file management system provides practitioners with a secure and organized way to handle case files. Our solution targets the UN sustainable goal of \"Peace, Justice and Strong Institutions\". Our solution covers various targets in SDG 16. 16.2(End abuse, exploitation, trafficking and all forms of violence against and torture of children): Our app provides education, which can significantly increase awareness and contribute towards the end of abuse 16.3(Promote the rule of law at the national and international levels and ensure equal access to justice for all): Our application will ensure public is aware of their legal rights and cannot be exploited by wrongdoers by feeding them lies 16.5(Substantially reduce corruption and bribery in all their forms): With the easy access to legal information, general public will be more prone to take a stand against corruption. 16.10(Ensure public access to information and protect fundamental freedoms, in accordance with national legislation and international agreements): The Right to Information, commonly understood as the \u201cright to access information held by public bodies\u201d in international parlance is recognised by UNESCO as a fundamental freedom and a key pillar to building inclusive societies. Legal jargon witholds the right to information in a disguised manner and our application ensures that it doesn't happen.","title":"Description"},{"location":"#installation-and-run","text":"To test lawer, you can clone the github repository using the git clone. Make sure you have an environment where you can run flutter projects, you may use the terminal or android studio as per your preference. If you are on android studio, open the flutter project inside the project directory, or cd in the flutter directory of you are on the terminal. Open the terminal in android studio and run the command flutter pub get This command will resolve all the dependencies required for the project, and install any required packages. After that we our project is ready to run, use the emulator or connect a device as per your preference, and run the command flutter run People with android studio might run the project with the run main.dart button, it's okay to do so, but for running the project the first time, it is advised to run the command as flutter run can prompt the user to setup some things like multidex support if they haven't been set already.","title":"Installation and run"},{"location":"codeexp/","text":"Backend get key words This code uses gemini model to extract keywords from user's situational input. The function cleans the model's response and returns the identified keywords. Gemini AI configure The code sets up a Python environment to interact with the Gemini language model by importing the necessary libraries and setting an API key. Additionally, the code defines safety settings to prevent Gemini from producing harmful content. The code also allows us to manipulate parameters like temperature to generate better results Creating a new Folder in the file system This code helps us add a new folder into our file system. Retrieving files from storage The code implements an API view for retrieving files from a storage bucket. Upon receiving a GET request, it fetches the specified file's content from the bucket, sets up an HTTP response with the file's content as a downloadable attachment, and returns it. If the requested file is not found, it raises a 404 error with an appropriate error message.","title":"Code Insight"},{"location":"codeexp/#backend","text":"","title":"Backend"},{"location":"impact/","text":"Feedback Issue: Limited Accessibility of Precedent Search for Laypersons Description: Traditional keyword-based precedent search methods relied heavily on legal jargon, posing a significant barrier for those without specialized training. Resolution: Inspired by user feedback, the team undertook the following steps: Solution Concept: Develop a situation-based precedent search function to enhance accessibility. AI Implementation: Integrate Gemini AI to enable natural language processing, allowing users to describe their legal situations in plain terms. Impact Improved User Experience: Laypersons can intuitively find relevant precedents without specialized knowledge, leading to a smoother and more empowering experience. Increased Accessibility: The application becomes a valuable resource for a wider audience, bridging the gap between legal knowledge and everyday understanding. Issue: Incorrect Category Mapping Due to Suboptimal Gemini Model Parameters Description: Initial parameter settings for the Gemini model resulted in the misclassification of items within certain categories. This error was not detected during the internal development and testing phases. Resolution: Following user feedback highlighting the misclassifications, the team conducted a thorough analysis. Key parameters, such as temperature, were adjusted to optimize the Gemini model's performance. Impact Improved Accuracy: Parameter optimization significantly enhanced the accuracy of category mapping, ensuring correct classifications within the system. Enhanced User Experience: The correction of mapping errors streamlined the user experience, eliminating confusion and frustration caused by incorrect classifications. Users were delighted about the new searching capabilities of our application and lawer did not let down. We had users test out search based upon different types of criminal situations and lawer provided them relevant legal precedants. Scalability Lawer currently operates upon Indian law database with the api of the indiankanoon.org . This application has a huge scalability and our team is soon gonna start on some of them. Some possible extensions are:- Extension towards the legal databases of other nations, this sort of extension would require access to the the central judicial databases of other nations. Multi language support, this will promote inclusivity and help lawer reach a larger audience. This extension will be easily achievable with the help of cloud translation api . Multi platform support. The application is currently supported on android only, our team aims to provide multiplatform support like ios and web. Flutter's multiplatform supprt will be a huge help in this, with a little restructuring of files and referencing the documentation, we will soon make lawer available on every screen The scalability factors mentioned above focus more on increasing the audience base, our team have planned many other extensions making the application more functionality rich. Some of these ideas are Law of the week: We want to empower our users by providing easy-to-understand explanations of laws that affect their everyday lives. This extension will promote engagement to our application and legal awarenes of the general public will increase. AI legal assistant: It often happens that civilians are stuck in situations where approaching a legal advisor is difficult. Our AI legal assistant would be just what the user needs in such a situation. We can use the gemini AI model for this functionality, with the amazing natural laguage processing of the model, we can get this ready. With some training, our AI model can provide the legally correct sequence of actions for an individual, this will be a handy tool for many.","title":"Feedback and Scalability"},{"location":"impact/#feedback","text":"Issue: Limited Accessibility of Precedent Search for Laypersons Description: Traditional keyword-based precedent search methods relied heavily on legal jargon, posing a significant barrier for those without specialized training. Resolution: Inspired by user feedback, the team undertook the following steps: Solution Concept: Develop a situation-based precedent search function to enhance accessibility. AI Implementation: Integrate Gemini AI to enable natural language processing, allowing users to describe their legal situations in plain terms. Impact Improved User Experience: Laypersons can intuitively find relevant precedents without specialized knowledge, leading to a smoother and more empowering experience. Increased Accessibility: The application becomes a valuable resource for a wider audience, bridging the gap between legal knowledge and everyday understanding. Issue: Incorrect Category Mapping Due to Suboptimal Gemini Model Parameters Description: Initial parameter settings for the Gemini model resulted in the misclassification of items within certain categories. This error was not detected during the internal development and testing phases. Resolution: Following user feedback highlighting the misclassifications, the team conducted a thorough analysis. Key parameters, such as temperature, were adjusted to optimize the Gemini model's performance. Impact Improved Accuracy: Parameter optimization significantly enhanced the accuracy of category mapping, ensuring correct classifications within the system. Enhanced User Experience: The correction of mapping errors streamlined the user experience, eliminating confusion and frustration caused by incorrect classifications. Users were delighted about the new searching capabilities of our application and lawer did not let down. We had users test out search based upon different types of criminal situations and lawer provided them relevant legal precedants.","title":"Feedback"},{"location":"impact/#scalability","text":"Lawer currently operates upon Indian law database with the api of the indiankanoon.org . This application has a huge scalability and our team is soon gonna start on some of them. Some possible extensions are:- Extension towards the legal databases of other nations, this sort of extension would require access to the the central judicial databases of other nations. Multi language support, this will promote inclusivity and help lawer reach a larger audience. This extension will be easily achievable with the help of cloud translation api . Multi platform support. The application is currently supported on android only, our team aims to provide multiplatform support like ios and web. Flutter's multiplatform supprt will be a huge help in this, with a little restructuring of files and referencing the documentation, we will soon make lawer available on every screen The scalability factors mentioned above focus more on increasing the audience base, our team have planned many other extensions making the application more functionality rich. Some of these ideas are Law of the week: We want to empower our users by providing easy-to-understand explanations of laws that affect their everyday lives. This extension will promote engagement to our application and legal awarenes of the general public will increase. AI legal assistant: It often happens that civilians are stuck in situations where approaching a legal advisor is difficult. Our AI legal assistant would be just what the user needs in such a situation. We can use the gemini AI model for this functionality, with the amazing natural laguage processing of the model, we can get this ready. With some training, our AI model can provide the legally correct sequence of actions for an individual, this will be a handy tool for many.","title":"Scalability"},{"location":"tech/","text":"Components Tech stack Flutter Firebase Django-REST Gemini Usage of tech stack We used github for our project workflow, frontend work was started with design choices like colour pallets and the responsiveness of the app. We used figma for designing different pages, it's vector design tools helped us create a wide variety of pages Django-REST framework was used to create the API for all the communication between the client and the server, it was used for all requests and responses. It was also used to modify the data in a more readable form where it was necessary. The database was initially in the form of json files, to implement searching, gemini was used. First, it was used to map the json files to categories on which we are gonna search upon. Then we used the natural language processing of gemini to map the user prompt of a certain situation into those categories, and return the result with the most weights associated to it. Firebase was used to store the scraped data, and user data, like the user identification and the file system for a particular user. Firebase is used for the OTP verification process, in case a user doesn't have an account, firebase creates one for the user. Firebase provided a seamless interface to apply server side features For the frontend interface Flutter framework was used with a wide variety of packages to handle the features that the app offers to users. Some of these packages and their uses were:- file_picker: picking files from external storage flutter_widget_from_html: convert string containing html code to flutter widgets permission_handler: asking user for permissions to manage external storage http: converting files from external storage into a form which can be transferred to firebase Flutter was preferred as flutter provides a relatively fast development process and can is easily extensible to multiple platforms like ios and web, which is one of our future targets. Iteration and Challenges The frontend started with Figma designs and seamlessly transitioned into Flutter development, leveraging its rapid development capabilities for fast paced page creation. During implementation of certain functionalities like external storage file selection, or rendering html strings of legal precedents, we would often encounter the problem of using the right package with the right versions. Flutter goes through upgrades very frequently which makes it hard for a developer to keep up, which also deprecates a lot of online resources even dating a couple of years back. The frontend team often had to refer to the documentation and cross checking the compatibility of packages before using them in the project, this slowed down the process but made the work much more streamlined. A major challenge the team faced was making a File System inside our application, this required collaboration from both the teams working on the frontend and the backend side of the application. Together we figured out a solution in which we store the directory path as a string, and manipulated it whenever a frontend event that changed directories was called, we then shared this variable with the backend to keep track of it so that we don't loose when popping states. The backend team started with the creation of databases with web scraping different websites, it took some time to find the right source that was open to developers. We end up using the indian kanoon website for making out database. Then the team proceeded to transfer everything to firebase cloud storage. One of the major challenges encountered by the team was providing the file to the front end interface in the form of an html string to be rendered. Initially, sending the json data byte by byte proved to be a failure, with the reference of some documentation, the team figured out that sending the data through octet streams solved the problem. Some other small challenges faced by the team were tuning the Gemini model with the right initialization parameters, it took a lot of experimentation and testing to come up with the right values. Initially, there was a security concerns of the API key being exposed, the team constructed the env file to patch that error.","title":"Tech stack and info"},{"location":"tech/#components","text":"","title":"Components"},{"location":"tech/#tech-stack","text":"Flutter Firebase Django-REST Gemini","title":"Tech stack"},{"location":"tech/#usage-of-tech-stack","text":"We used github for our project workflow, frontend work was started with design choices like colour pallets and the responsiveness of the app. We used figma for designing different pages, it's vector design tools helped us create a wide variety of pages Django-REST framework was used to create the API for all the communication between the client and the server, it was used for all requests and responses. It was also used to modify the data in a more readable form where it was necessary. The database was initially in the form of json files, to implement searching, gemini was used. First, it was used to map the json files to categories on which we are gonna search upon. Then we used the natural language processing of gemini to map the user prompt of a certain situation into those categories, and return the result with the most weights associated to it. Firebase was used to store the scraped data, and user data, like the user identification and the file system for a particular user. Firebase is used for the OTP verification process, in case a user doesn't have an account, firebase creates one for the user. Firebase provided a seamless interface to apply server side features For the frontend interface Flutter framework was used with a wide variety of packages to handle the features that the app offers to users. Some of these packages and their uses were:- file_picker: picking files from external storage flutter_widget_from_html: convert string containing html code to flutter widgets permission_handler: asking user for permissions to manage external storage http: converting files from external storage into a form which can be transferred to firebase Flutter was preferred as flutter provides a relatively fast development process and can is easily extensible to multiple platforms like ios and web, which is one of our future targets.","title":"Usage of tech stack"},{"location":"tech/#iteration-and-challenges","text":"The frontend started with Figma designs and seamlessly transitioned into Flutter development, leveraging its rapid development capabilities for fast paced page creation. During implementation of certain functionalities like external storage file selection, or rendering html strings of legal precedents, we would often encounter the problem of using the right package with the right versions. Flutter goes through upgrades very frequently which makes it hard for a developer to keep up, which also deprecates a lot of online resources even dating a couple of years back. The frontend team often had to refer to the documentation and cross checking the compatibility of packages before using them in the project, this slowed down the process but made the work much more streamlined. A major challenge the team faced was making a File System inside our application, this required collaboration from both the teams working on the frontend and the backend side of the application. Together we figured out a solution in which we store the directory path as a string, and manipulated it whenever a frontend event that changed directories was called, we then shared this variable with the backend to keep track of it so that we don't loose when popping states. The backend team started with the creation of databases with web scraping different websites, it took some time to find the right source that was open to developers. We end up using the indian kanoon website for making out database. Then the team proceeded to transfer everything to firebase cloud storage. One of the major challenges encountered by the team was providing the file to the front end interface in the form of an html string to be rendered. Initially, sending the json data byte by byte proved to be a failure, with the reference of some documentation, the team figured out that sending the data through octet streams solved the problem. Some other small challenges faced by the team were tuning the Gemini model with the right initialization parameters, it took a lot of experimentation and testing to come up with the right values. Initially, there was a security concerns of the API key being exposed, the team constructed the env file to patch that error.","title":"Iteration and Challenges"}]}